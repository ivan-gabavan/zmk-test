/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen { zmk,physical-layout = &foostan_corne_6col_layout; };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <300>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        capdance: capdance {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPDANCE";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;
        };

        volknob: volume_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_VOLUME_KNOB";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        rgbknob: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENCODER_RGB";
            #sensor-binding-cells = <2>;
            bindings = <&rgb_ug>, <&rgb_ug>;
        };
    };

    macros {
        switch_to_ru: switch_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(MINUS)) &to 0>;
            label = "SWITCH_TO_RU";
        };

        switch_to_en: switch_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(MINUS)) &to 0>;
            label = "SWITCH_TO_EN";
        };

        select_complite: ce {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB &kp ENTER>;
            label = "CE";
        };

        google_meet_mute: google_meet_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(D) &kp LG(E)>;
            label = "GOOGLE_MEET_MUTE";
        };

        // Go programming macros

        go_err: go_err {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp F &kp SPACE &kp E &kp R &kp R &kp SPACE &kp EXCL &kp EQUAL &kp SPACE &kp N &kp I &kp L &kp SPACE &kp LBRC &kp ENTER &kp TAB &kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE &kp E &kp R &kp R &kp ENTER &kp RBRC>;
            label = "GO_ERR";
        };

        go_func: go_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp SPACE>;
            label = "GO_FUNC";
        };

        go_for: go_for {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp O &kp R &kp SPACE &kp UNDERSCORE &kp COMMA &kp SPACE>;
            label = "GO_FOR";
        };

        go_pkg: go_pkg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp A &kp C &kp K &kp A &kp G &kp E &kp SPACE &kp M &kp A &kp I &kp N &kp ENTER &kp ENTER>;
            label = "GO_PKG";
        };

        go_print: go_print {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp M &kp T &kp DOT &kp LS(P) &kp R &kp I &kp N &kp T &kp L &kp N &kp LPAR &kp DQT &kp DQT &kp COMMA &kp SPACE>;
            label = "GO_PRINT";
        };

        go_json: go_json {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp GRAVE &kp J &kp S &kp O &kp N &kp COLON &kp DQT &kp DQT &kp GRAVE>;
            label = "GO_JSON";
        };

        go_test: go_test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp SPACE &kp LS(T) &kp E &kp S &kp T>;
            label = "GO_TEST";
        };

        go_ctx: go_ctx {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp T &kp X &kp SPACE &kp C &kp O &kp N &kp T &kp E &kp X &kp T &kp DOT &kp LS(C) &kp O &kp N &kp T &kp E &kp X &kp T>;
            label = "GO_CTX";
        };

        go_defer: go_defer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E &kp F &kp E &kp R &kp SPACE>;
            label = "GO_DEFER";
        };

        go_assign: go_assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL &kp SPACE>;
            label = "GO_ASSIGN";
        };

        go_return: go_return {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE>;
            label = "GO_RETURN";
        };

        go_struct: go_struct {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp T &kp R &kp U &kp C &kp T &kp SPACE &kp LBRC &kp ENTER &kp TAB>;
            label = "GO_STRUCT";
        };

        go_type: go_type {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp Y &kp P &kp E &kp SPACE>;
            label = "GO_TYPE";
        };

        go_goroutine: go_goroutine {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp O &kp SPACE &kp F &kp U &kp N &kp C &kp LPAR &kp RPAR &kp SPACE &kp LBRC &kp ENTER &kp TAB>;
            label = "GO_GOROUTINE";
        };

        go_make: go_make {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp M &kp A &kp K &kp E &kp LPAR &kp LBKT &kp RBKT>;
            label = "GO_MAKE";
        };

        go_nil: go_nil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EXCL &kp EQUAL &kp SPACE &kp N &kp I &kp L>;
            label = "GO_NIL";
        };

        go_else: go_else {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp E &kp L &kp S &kp E &kp SPACE &kp LBRC &kp ENTER &kp TAB>;
            label = "GO_ELSE";
        };

        go_iface: go_iface {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp T &kp E &kp R &kp F &kp A &kp C &kp E &kp LBRC &kp RBRC>;
            label = "GO_IFACE";
        };

        go_switch: go_switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp W &kp I &kp T &kp C &kp H &kp SPACE>;
            label = "GO_SWITCH";
        };

        go_range: go_range {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp A &kp N &kp G &kp E &kp SPACE>;
            label = "GO_RANGE";
        };

        go_append: go_append {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp P &kp P &kp E &kp N &kp D &kp LPAR>;
            label = "GO_APPEND";
        };

        go_len: go_len {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp E &kp N &kp LPAR>;
            label = "GO_LEN";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp F13               &kp Q  &kp W  &kp F                &kp P      &kp B          &kp J      &kp L                     &kp U             &kp Y           &kp F18                    &kp DOUBLE_QUOTES
&mt LEFT_CONTROL F16  &kp A  &kp R  &kp S                &kp T      &kp G          &kp M      &kp N                     &kp E             &kp I           &kp O                      &hml SEMICOLON COLON
&kp MINUS             &kp Z  &kp X  &kp C                &kp D      &kp V          &kp K      &kp H                     &kp DOT           &hml SQT COMMA  &hml QUESTION EXCLAMATION  &kp EQUAL
                                    &mt LEFT_ALT ESCAPE  &kp SPACE  &lt 2 ENTER    &lt 1 F16  &mt LEFT_SHIFT BACKSPACE  &mt LEFT_GUI TAB
            >;
        };

        nums {
            bindings = <
&trans                &trans     &trans     &trans        &trans     &trans           &trans     &trans        &trans       &trans     &trans     &trans
&kp LEFT_PARENTHESIS  &kp N1     &kp N2     &kp N3        &kp N4     &kp N5           &kp N6     &kp N7        &kp N8       &kp N9     &kp N0     &kp RIGHT_PARENTHESIS
&trans                &kp EQUAL  &kp EQUAL  &kp MINUS     &kp PLUS   &kp BACKSLASH    &kp SLASH  &kp ASTERISK  &kp PERCENT  &kp COMMA  &kp EQUAL  &trans
                                            &kp NUMBER_5  &kp SPACE  &kp NUMBER_6     &trans     &trans        &trans
            >;
        };

        os {
            bindings = <
&soft_off      &trans      &trans            &trans            &trans        &trans     &trans   &kp LA(LG(LEFT_ARROW))  &kp UP    &kp LA(LG(RIGHT))  &trans         &sys_reset
&kp LESS_THAN  &kp DELETE  &kp LEFT_CONTROL  &kp LEFT_COMMAND  &kp LEFT_ALT  &kp F16    &kp F18  &kp LEFT                &kp DOWN  &kp RIGHT          &kp BACKSPACE  &kp GREATER_THAN
&trans         &trans      &trans            &trans            &trans        &kp F17    &kt F19  &trans                  &trans    &trans             &trans         &to 6
                                             &trans            &trans        &trans     &mo 5    &mo 3                   &mo 4
            >;
        };

        spec1 {
            bindings = <
&trans            &trans           &trans       &trans    &kp DOUBLE_QUOTES  &trans     &trans        &kp EXCLAMATION  &trans         &trans        &trans    &trans
&kp LEFT_BRACKET  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR         &kp SQT    &kp QUESTION  &kp PERCENT      &kp AMPERSAND  &kp ASTERISK  &kp PIPE  &kp RIGHT_BRACKET
&trans            &trans           &trans       &trans    &kp GRAVE          &trans     &trans        &trans           &trans         &trans        &trans    &trans
                                                &trans    &trans             &trans     &trans        &trans           &trans
            >;
        };

        spec2 {
            // Go programming layer - access via layer 4
            // Top row: common patterns (err, func, for, package, print | json, test, context, defer)
            // Home row: core syntax (:=, return, struct, type, goroutine | make, nil check, else, interface, switch)
            // Bottom row: utilities (range, append, len)

            bindings = <
&trans          &go_err     &go_func    &go_for     &go_pkg   &go_print        &go_json  &go_test  &go_ctx   &trans     &go_defer   &trans
&kp LEFT_BRACE  &go_assign  &go_return  &go_struct  &go_type  &go_goroutine    &go_make  &go_nil   &go_else  &go_iface  &go_switch  &kp RIGHT_BRACE
&trans          &go_range   &go_append  &go_len     &trans    &trans           &trans    &trans    &trans    &trans     &trans      &trans
                                        &trans      &trans    &trans           &trans    &trans    &trans
            >;
        };

        mouses {
            bindings = <
&trans  &trans           &trans          &msc SCRL_DOWN  &msc SCRL_DOWN  &trans         &trans         &trans          &mmv MOVE_UP    &trans           &trans     &trans
&trans  &msc SCRL_RIGHT  &msc SCRL_LEFT  &mkp RCLK       &mkp LCLK       &kp PAGE_UP    &kp PAGE_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK  &trans
&trans  &trans           &trans          &msc SCRL_UP    &msc SCRL_UP    &trans         &trans         &trans          &trans          &trans           &trans     &trans
                                         &trans          &trans          &trans         &trans         &trans          &trans
            >;
        };

        dota {
            bindings = <
&kp N5          &kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp Y           &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp S         &kp Q         &kp W         &kp E         &kp R           &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_ALT    &kp A         &kp H         &kp D         &kp F         &kp T           &trans  &trans  &trans  &trans  &trans  &to 0
                                            &kp N8        &kp N7        &kp NUMBER_6    &to 0   &trans  &trans
            >;
        };

        dota_cam {
            bindings = <
&trans  &trans   &trans    &kp UP_ARROW  &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TAB  &kp LEFT  &kp DOWN      &kp RIGHT  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans    &trans        &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans        &trans     &trans    &trans  &trans  &trans
            >;
        };
    };
};
