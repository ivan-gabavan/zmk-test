/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen { zmk,physical-layout = &foostan_corne_6col_layout; };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <300>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        capdance: capdance {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPDANCE";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;
        };

        volknob: volume_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_VOLUME_KNOB";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        rgbknob: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENCODER_RGB";
            #sensor-binding-cells = <2>;
            bindings = <&rgb_ug>, <&rgb_ug>;
        };
    };

    macros {
        switch_to_ru: switch_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(MINUS)) &to 0>;
            label = "SWITCH_TO_RU";
        };

        switch_to_en: switch_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(MINUS)) &to 0>;
            label = "SWITCH_TO_EN";
        };

        select_complite: ce {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB &kp ENTER>;
            label = "CE";
        };

        google_meet_mute: google_meet_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(D) &kp LG(E)>;
            label = "GOOGLE_MEET_MUTE";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp LG(LS(MINUS))           &kp Q  &kp W  &kp F                &kp P      &kp B          &kp J                &kp L                     &kp U             &kp Y           &kp LEFT_PARENTHESIS  &kp DOUBLE_QUOTES
&mt LEFT_CONTROL LA(SPACE)  &kp A  &kp R  &kp S                &kp T      &kp G          &kp M                &kp N                     &kp E             &kp I           &kp O                 &kp SEMI
&kp MINUS                   &kp Z  &kp X  &kp C                &kp D      &kp V          &kp K                &kp H                     &kp DOT           &hml SQT COMMA  &kp QUESTION          &kp EXCLAMATION
                                          &mt LEFT_ALT ESCAPE  &kp SPACE  &lt 2 ENTER    &lt 1 LS(LA(SPACE))  &mt LEFT_SHIFT BACKSPACE  &mt LEFT_GUI TAB
            >;
        };

        nums {
            bindings = <
&trans         &google_meet_mute  &kp LS(AT)  &kp LS(POUND)     &kp LS(DLLR)       &kp LS(PRCNT)    &kp LS(CARET)  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp GRAVE
&kp LESS_THAN  &kp N1             &kp N2      &kp N3            &kp N4             &kp N5           &kp N6         &kp N7                &kp N8                 &kp N9          &kp N0           &kp GREATER_THAN
&trans         &kp DOUBLE_QUOTES  &kp PLUS    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp FSLH         &kp BACKSLASH  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS       &kp EQUAL        &kp ASTERISK
                                              &mt LGUI LG(Z)    &kp LA(ENTER)      &mo 3            &kp RET        &trans                &kp LALT
            >;
        };

        os {
            bindings = <
&soft_off   &kp LS(LC(D))  &kp LS(LC(F))  &kp LG(W)           &kp LG(T)  &kp LA(LS(ENTER))    &kp LC(R)        &kp LA(LG(LEFT_ARROW))  &kp UP              &kp LA(LG(RIGHT))  &kp LG(LA(R))  &sys_reset
&kp LG(Q)   &kp DELETE     &kp LG(Z)      &kp LS(TAB)         &kp TAB    &kp LS(LG(F))        &kp LC(D)        &kp LEFT                &kp DOWN            &kp RIGHT          &kp BACKSPACE  &kp LA(LG(R))
&kp LG(F2)  &kp LS(LG(A))  &kp LG(X)      &kp LG(A)           &kp LG(C)  &kp LG(LS(L))        &kt LA(ENTER)    &kp LG(V)               &kp LG(B)           &kp LA(LGUI)       &kp LG(F)      &to 4
                                          &mt LGUI LG(LS(Z))  &trans     &trans               &lt 3 LS(LG(J))  &mt LEFT_ALT LG(LC(F))  &mt LEFT_GUI LG(Z)
            >;
        };

        mouses {
            bindings = <
&trans  &trans           &trans          &msc SCRL_DOWN  &msc SCRL_DOWN  &trans         &trans         &trans          &mmv MOVE_UP    &trans           &trans     &trans
&trans  &msc SCRL_RIGHT  &msc SCRL_LEFT  &mkp RCLK       &mkp LCLK       &kp PAGE_UP    &kp PAGE_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK  &trans
&trans  &trans           &trans          &msc SCRL_UP    &msc SCRL_UP    &trans         &trans         &trans          &trans          &trans           &trans     &trans
                                         &trans          &trans          &trans         &trans         &trans          &trans
            >;
        };

        dota {
            bindings = <
&kp N5          &kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp Y        &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp S         &kp E         &kp W         &kp Q         &kp R        &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_ALT    &kp G         &kp H         &kp F         &kp D         &kp T        &trans  &trans  &trans  &trans  &trans  &to 0
                                            &kp F1        &mo 5         &kp SPACE    &to 0   &trans  &trans
            >;
        };

        dota_cam {
            bindings = <
&trans  &trans   &trans    &kp UP_ARROW  &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TAB  &kp LEFT  &kp DOWN      &kp RIGHT  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans    &trans        &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans        &trans     &trans    &trans  &trans  &trans
            >;
        };
    };
};
