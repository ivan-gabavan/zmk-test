/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen { zmk,physical-layout = &foostan_corne_6col_layout; };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <300>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        capdance: capdance {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPDANCE";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;
        };

        volknob: volume_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_VOLUME_KNOB";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        rgbknob: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENCODER_RGB";
            #sensor-binding-cells = <2>;
            bindings = <&rgb_ug>, <&rgb_ug>;
        };
    };

    macros {
        switch_to_ru: switch_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(MINUS)) &to 0>;
            label = "SWITCH_TO_RU";
        };

        switch_to_en: switch_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(MINUS)) &to 0>;
            label = "SWITCH_TO_EN";
        };

        select_complite: ce {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TAB &kp ENTER>;
            label = "CE";
        };

        google_meet_mute: google_meet_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(D) &kp LG(E)>;
            label = "GOOGLE_MEET_MUTE";
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp F24               &kp Q  &kp W  &kp F                &kp P      &kp B          &kp J      &kp L                     &kp U             &kp Y           &kp F21                    &kp DOUBLE_QUOTES
&mt LEFT_CONTROL F22  &kp A  &kp R  &kp S                &kp T      &kp G          &kp M      &kp N                     &kp E             &kp I           &kp O                      &hml SEMICOLON COLON
&kp MINUS             &kp Z  &kp X  &kp C                &kp D      &kp V          &kp K      &kp H                     &kp DOT           &hml SQT COMMA  &hml QUESTION EXCLAMATION  &kp EQUAL
                                    &mt LEFT_ALT ESCAPE  &kp SPACE  &lt 2 ENTER    &lt 1 F23  &mt LEFT_SHIFT BACKSPACE  &mt LEFT_GUI TAB
            >;
        };

        nums {
            bindings = <
&trans                &trans     &trans     &trans     &trans        &trans           &trans     &trans        &trans       &trans     &trans     &trans
&kp LEFT_PARENTHESIS  &kp N1     &kp N2     &kp N3     &kp N4        &kp N5           &kp N6     &kp N7        &kp N8       &kp N9     &kp N0     &kp RIGHT_PARENTHESIS
&trans                &kp EQUAL  &kp EQUAL  &kp MINUS  &kp PLUS      &kp BACKSLASH    &kp SLASH  &kp ASTERISK  &kp PERCENT  &kp EQUAL  &kp EQUAL  &trans
                                            &trans     &kp NUMBER_5  &kp NUMBER_6     &trans     &trans        &trans
            >;
        };

        os {
            bindings = <
&soft_off      &trans      &trans     &kp F13           &kp F14       &kp F15    &kp F17  &kp LA(LG(LEFT_ARROW))  &kp UP    &kp LA(LG(RIGHT))  &trans         &sys_reset
&kp LESS_THAN  &kp DELETE  &kp LG(Z)  &kp LEFT_COMMAND  &kp LEFT_ALT  &kp F16    &kp F18  &kp LEFT                &kp DOWN  &kp RIGHT          &kp BACKSPACE  &kp GREATER_THAN
&trans         &trans      &trans     &trans            &trans        &kp F20    &kt F19  &kp C_SLEEP_MODE        &trans    &trans             &trans         &to 6
                                      &trans            &trans        &trans     &mo 5    &mo 3                   &mo 4
            >;
        };

        spec1 {
            bindings = <
&trans            &trans           &trans       &trans    &kp DOUBLE_QUOTES  &trans     &trans        &kp EXCLAMATION  &trans         &trans        &trans    &trans
&kp LEFT_BRACKET  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR         &kp SQT    &kp QUESTION  &kp PERCENT      &kp AMPERSAND  &kp ASTERISK  &kp PIPE  &kp RIGHT_BRACKET
&trans            &trans           &trans       &trans    &kp GRAVE          &trans     &trans        &trans           &trans         &trans        &trans    &trans
                                                &trans    &trans             &trans     &trans        &trans           &trans
            >;
        };

        spec2 {
            bindings = <
&trans          &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_BRACE  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &kp RIGHT_BRACE
&trans          &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        mouses {
            bindings = <
&trans  &trans           &trans          &msc SCRL_DOWN  &msc SCRL_DOWN  &trans         &trans         &trans          &mmv MOVE_UP    &trans           &trans     &trans
&trans  &msc SCRL_RIGHT  &msc SCRL_LEFT  &mkp RCLK       &mkp LCLK       &kp PAGE_UP    &kp PAGE_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK  &trans
&trans  &trans           &trans          &msc SCRL_UP    &msc SCRL_UP    &trans         &trans         &trans          &trans          &trans           &trans     &trans
                                         &trans          &trans          &trans         &trans         &trans          &trans
            >;
        };

        dota {
            bindings = <
&kp N5          &kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp Y           &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp S         &kp E         &kp W         &kp Q         &kp R           &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_ALT    &kp G         &kp H         &kp F         &kp D         &kp T           &trans  &trans  &trans  &trans  &trans  &to 0
                                            &kp N8        &kp N7        &kp NUMBER_6    &to 0   &trans  &trans
            >;
        };

        dota_cam {
            bindings = <
&trans  &trans   &trans    &kp UP_ARROW  &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TAB  &kp LEFT  &kp DOWN      &kp RIGHT  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &trans    &trans        &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
                           &trans        &trans     &trans    &trans  &trans  &trans
            >;
        };
    };
};
