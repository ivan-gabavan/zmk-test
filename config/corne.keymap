/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

behaviors {
    as: auto_shift {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;
                tapping_term_ms = <200>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;
      tapping-term-ms = <200>;

      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };
    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;
      tapping-term-ms = <200>;

      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };
    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
    volknob: volume_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "ENCODER_VOLUME_KNOB";
      #sensor-binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
    };
    rgbknob: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ENCODER_RGB";
      #sensor-binding-cells = <2>;
      bindings = <&rgb_ug>, <&rgb_ug>;
    };
  };

        keymap {
                compatible = "zmk,keymap";

                base {
                    bindings = <
                  &to 1     &kp Q  &kp W  &kp F     &kp P                 &kp B        &kp J    &kp L                 &kp U           &kp
                  Y    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
                  &kp TAB    &kp A  &kp R  &kp S     &hml LS(LG(SPACE)) T  &kp G        &kp M    &hml LS(LG(SPACE)) N  &kp E           &kp I    &kp O                 &kp SEMI
                  &kp LSHFT  &kp Z  &kp X  &kp C     &kp D                 &kp V        &kp K    &kp H                 &hml SQT COMMA  &kp DOT  &kp QUESTION          &kp EXCLAMATION
                                           &kp LGUI  &trans                &kp SPACE    &kp RET  &lt 1 BACKSPACE       &kp LALT
                        >;
                };

                nums {
                            bindings = <
                &trans         &kp LS(EXCL)   &kp LS(AT)   &kp LS(POUND)   &kp LS(DLLR)     &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)
                &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp GRAVE
                &kp LESS_THAN  &kp N1         &kp N2       &kp N3          &kp N4           &kp N5           &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &kp GREATER_THAN
                &trans        &trans  &kp PLUS  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp FSLH         &kp NUBS       &kp LBKT
                &kp RBKT      &kp MINUS     &kp EQUAL     &trans
                                                           &kp LGUI        &trans           &kp SPACE        &kp RET        &trans        &kp LALT
                            >;
                        };

                os {
                            bindings = <
                &kp F1  &kp F2      &kp F3       &kp F4     &kp F5     &kp F6       &kp F7     &kp F8     &kp F9     &kp F10       &kp F11        &kp F12
                &trans  &kp DELETE  &kp LS(TAB)  &kp LEFT   &kp RIGHT  &mkp BTN1    &mkp BTN2  &kp UP     &kp DOWN   &kp TAB
                 &kp BACKSPACE  &trans
                &trans  &trans      &kp LG(X)    &kp LG(A)  &kp LG(C)  &trans       &trans     &kp LG(V)  &kp LG(F)  &kp LA(LGUI)  &trans         &trans
                                                 &kp LGUI   &to 0      &kp SPACE    &kp ENTER  &mo 3      &kp LALT
                            >;
                        };

                        mouse {
                            bindings = <
                &trans  &trans  &trans  &trans          &trans           &trans       &trans     &trans        &trans          &trans  &trans  &trans
                &trans  &trans  &trans  &msc SCRL_LEFT  &msc SCRL_RIGHT  &mkp BTN1    &mkp BTN2  &msc SCRL_UP  &msc SCRL_DOWN  &trans  &trans  &trans
                &trans  &trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_RIGHT  &mkp BTN1    &mkp BTN2  &mmv MOVE_UP  &mmv MOVE_DOWN  &trans  &trans  &trans
                                        &trans          &trans           &mkp BTN1    &trans     &trans        &trans
                            >;
                        };

        };
};
