/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen { zmk,physical-layout = &foostan_corne_6col_layout; };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <500>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        capdance: capdance {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPDANCE";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPS>;
        };

        volknob: volume_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_VOLUME_KNOB";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        rgbknob: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENCODER_RGB";
            #sensor-binding-cells = <2>;
            bindings = <&rgb_ug>, <&rgb_ug>;
        };
    };

    macros {
        switch_to_ru: switch_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(MINUS)) &to 1>;
            label = "SWITCH_TO_RU";
        };

        switch_to_en: switch_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(MINUS)) &to 0>;
            label = "SWITCH_TO_EN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&switch_to_ru  &kp Q  &kp W  &kp F           &kp P            &kp B        &kp J                         &kp L            &kp U               &kp Y    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp TAB        &kp A  &kp R  &kp S           &kp T            &kp G        &kp M                         &kp N            &kp E               &kp I    &kp O                 &kp SEMI
&kp LSHFT      &kp Z  &kp X  &kp C           &kp D            &kp V        &kp K                         &kp H            &hml SQT COMMA      &kp DOT  &kp QUESTION          &kp EXCLAMATION
                             &mt LGUI LC(Z)  &lt 3 LA(SPACE)  &kp SPACE    &mt LEFT_SHIFT LS(LA(SPACE))  &lt 2 BACKSPACE  &mt LALT LG(SPACE)
            >;
        };

        ru {
            bindings = <
&switch_to_en  &kp Q     &hml O I     &kp A     &kp G            &kp COMMA    &kp SEMI                      &kp K            &kp E              &kp DOT          &kp X         &kp MINUS
&kp TAB        &hml Z F  &kp H        &kp C     &kp N            &kp U        &kp V                         &kp Y            &hml BSLH T        &hml S B         &kp J         &kp LS(RPAR)
&kp LSHFT      &kp P     &hml RBKT M  &kp W     &kp L            &kp D        &kp R                         &kp LBKT         &kp LC(LA(COMMA))  &kp LC(LA(DOT))  &kp LS(EXCL)  &kp LS(QMARK)
                                      &kp LGUI  &lt 3 LA(SPACE)  &kp SPACE    &mt LEFT_SHIFT LS(LA(SPACE))  &lt 2 BACKSPACE  &kp LALT
            >;
        };

        nums {
            bindings = <
&trans         &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)   &kp LS(DLLR)     &kp LS(PRCNT)    &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp GRAVE
&kp LESS_THAN  &kp N1        &kp N2      &kp N3          &kp N4           &kp N5           &kp N6         &kp N7        &kp N8        &kp N9        &kp N0        &kp GREATER_THAN
&trans         &trans        &kp PLUS    &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp FSLH         &kp NUBS       &kp LBKT      &kp RBKT      &kp MINUS     &kp EQUAL     &trans
                                         &kp LGUI        &mo 4            &kp ENTER        &kp RET        &trans        &kp LALT
            >;
        };

        os {
            bindings = <
&kp ESCAPE  &kp LS(LC(D))  &kp LS(LC(F))      &kp LG(W)    &kp LG(T)  &kp F6              &kp LC(R)             &kp LA(LG(LEFT_ARROW))  &kp UP     &kp LA(LG(RIGHT))  &kp F11        &kp F12
&kp LG(Q)   &kp DELETE     &kp LS(LG(MINUS))  &kp LS(TAB)  &kp TAB    &kp LS(LG(F))       &kp LC(D)             &kp LEFT                &kp DOWN   &kp RIGHT          &kp BACKSPACE  &kp F9
&kp LG(F2)  &kp LS(LG(A))  &kp LG(X)          &kp LG(A)    &kp LG(C)  &kp LG(LS(L))       &kp LS(LG(NUMBER_4))  &kp LG(V)               &kp LG(B)  &kp LA(LGUI)       &kp LG(F)      &to 5
                                              &kp LGUI     &trans     &kp LEFT_CONTROL    &kp ENTER             &lt 4 LG(LS(J))         &kp LALT
            >;
        };

        mouses {
            bindings = <
&trans           &msc SCRL_DOWN  &trans          &trans     &trans     &trans    &trans  &trans          &mmv MOVE_UP    &trans           &trans     &trans
&msc SCRL_RIGHT  &msc SCRL_UP    &msc SCRL_LEFT  &mkp RCLK  &mkp LCLK  &trans    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp RCLK  &trans
&trans           &trans          &trans          &trans     &trans     &trans    &trans  &trans          &trans          &trans           &trans     &trans
                                                 &trans     &trans     &trans    &trans  &trans          &trans
            >;
        };

        game-mode {
            bindings = <
&kp Q  &kp W  &kp E  &kp R     &kp T      &kp Y        &kp U      &kp I      &kp O     &kp P     &kp LBKT  &kp LBKT
&kp A  &kp S  &kp D  &kp F     &kp G      &kp H        &kp J      &kp K      &kp L     &kp SEMI  &kp APOS  &kp ENTER
&kp Z  &kp X  &kp C  &kp V     &kp B      &kp N        &kp M      &kp COMMA  &kp DOT   &kp FSLH  &trans    &to 0
                     &kp LGUI  &kp SPACE  &kp LSHFT    &kp LSHFT  &kp SPACE  &kp LALT
            >;
        };
    };
};
